#pragma checksum "D:\C#\ProjectLzPhong\CDCNPM_PHONG\CDCNPM\Views\Home\HomePage.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "06ee6508dabca9d94282824d0839dad050c8862b"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_HomePage), @"mvc.1.0.view", @"/Views/Home/HomePage.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 2 "D:\C#\ProjectLzPhong\CDCNPM_PHONG\CDCNPM\Views\_ViewImports.cshtml"
using DevExpress.AspNetCore;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\C#\ProjectLzPhong\CDCNPM_PHONG\CDCNPM\Views\_ViewImports.cshtml"
using CDCNPM.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\C#\ProjectLzPhong\CDCNPM_PHONG\CDCNPM\Views\_ViewImports.cshtml"
using CDCNPM.Reports;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"06ee6508dabca9d94282824d0839dad050c8862b", @"/Views/Home/HomePage.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"27b4a0e1a05de554dfd26f7314e3020360a16281", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_HomePage : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<List<SqlTable>>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-controller", "home", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("asp-action", "report", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "D:\C#\ProjectLzPhong\CDCNPM_PHONG\CDCNPM\Views\Home\HomePage.cshtml"
  
    ViewBag.pageTitle = "Index home";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<div class=""flex h-screen"">
    <div class=""sidebar_table_sql w-1/6 h-full bg-sky-500/100 overflow-auto p-[15px]"">
        <!-- <div class=""flex mt-4"">
          <label class=""flex items-center"">
            <input
              type=""checkbox""
              class=""form-checkbox h-5 w-5 text-gray-600 table-sql-check""
              value=""NhanVien""
            />
            <span class=""ml-[5px]"">NhanVien</span>
          </label>
        </div> -->
    </div>
    <div class=""w-5/6 h-full bg-cyan-500 overflow-auto px-[20px] py-[15px]"">
        <div id=""query-section"">
            <div class=""mt-[10px] w-full border-2 border-solid border-neutral-300 rounded px-[20px] py-[20px]"">
                <h2 class=""mb-[10px]"">Query</h2>
                <div class=""grid grid-cols-12"">
                    <div class=""col-span-9"">
                        <!-- <textarea class=""resize-none rounded h-[300px] w-full""></textarea> -->
                        <div>
                            <textarea id=""sh");
            WriteLiteral(@"ow-query-area"" class=""resize-none rounded h-[150px] w-full focus:outline-hidden px-[10px] py[10px]""></textarea>
                        </div>
                    </div>
                    <div class=""col-span-3"">
                        <div class=""ml-[15px]"">
                            <button id=""create-query""
                                    type=""button""
                                    class=""text-gray-900 bg-gray-100 hover:bg-gray-200 focus:ring-4 focus:outline-none focus:ring-gray-100 font-medium rounded text-sm px-5 py-2.5 text-center inline-flex items-center dark:focus:ring-gray-500 mr-2 mb-2"">
                                Create query
                            </button>
                            <button type=""button""
                                    class=""text-gray-900 bg-gray-100 hover:bg-gray-200 focus:ring-4 focus:outline-none focus:ring-gray-100 font-medium rounded text-sm px-5 py-2.5 text-center inline-flex items-center dark:focus:ring-gray-500 mr-2 mb-2"">
      ");
            WriteLiteral("                          ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "06ee6508dabca9d94282824d0839dad050c8862b6198", async() => {
                WriteLiteral("Create report");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.AnchorTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Controller = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            __Microsoft_AspNetCore_Mvc_TagHelpers_AnchorTagHelper.Action = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                            </button>
                            <button type=""button""
                                    class=""text-gray-900 bg-gray-100 hover:bg-gray-200 focus:ring-4 focus:outline-none focus:ring-gray-100 font-medium rounded text-sm px-5 py-2.5 text-center inline-flex items-center dark:focus:ring-gray-500 mr-2 mb-2"">
                                Clear selected tables
                            </button>
                            <button type=""button""
                                    class=""text-gray-900 bg-gray-100 hover:bg-gray-200 focus:ring-4 focus:outline-none focus:ring-gray-100 font-medium rounded text-sm px-5 py-2.5 text-center inline-flex items-center dark:focus:ring-gray-500 mr-2 mb-2"">
                                clear selected columns
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div id=""table-section""
             class=""mt-[10px]");
            WriteLiteral(@" w-full border-2 border-solid border-neutral-300 px-[20px] py-[20px] mt-8"">
            <div id=""table-header-name"" class=""grid grid-cols-12 gap-3"">
                <div class=""header-title font-bold text-[12px] col-span-1"">
                    TableName
                </div>
                <div class=""header-title font-bold text-[12px] col-span-1"">
                    FieldName
                </div>
                <div class=""header-title font-bold text-[12px] col-span-3"">
                    RenameField
                </div>
                <div class=""header-title font-bold text-[12px] col-span-1"">
                    Total
                </div>
                <div class=""header-title font-bold text-[12px] col-span-1"">
                    IsSort
                </div>
                <div class=""header-title font-bold text-[12px] col-span-1"">
                    IsShow
                </div>
                <div class=""header-title font-bold text-[12px] col-span-2"">
            ");
            WriteLiteral(@"        Condition
                </div>
                <div class=""header-title font-bold text-[12px] col-span-2"">
                    OrCondition
                </div>
            </div>
        </div>
        <div class=""column-container border-solid border-2 border-neutral-300 px-[20px] py-[10px] rounded mt-8"">
            <h2 class=""font-bold mb-[5px]"">Columns List</h2>
            <div class=""col-wrapper"">
                <!-- <div
                  class=""relative column-item border-solid border-2 border-neutral-300 px-[20px] py-[15px] rounded mt-3""
                >
                  <div
                    class=""bg-neutral-100/[0.5] w-full h-full absolute rounded top-0 left-0""
                  ></div>
                  <h2 class=""font-bold"">CTDDH</h2>
                  <div class=""flex flex-wrap"">
                    <div class=""flex mt-4"">
                      <label class=""flex items-center"">
                        <input
                          type=""checkbox""
      ");
            WriteLiteral(@"                    class=""form-checkbox h-5 w-5 text-gray-600 col-table-check""
                          value=""Kho""
                          data-table=""KHO""
                        />
                        <span class=""ml-[5px] font-medium"">Kho</span>
                      </label>
                    </div>
                  </div>
                </div> -->
            </div>
        </div>
    </div>
</div>



");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n    <script type=\"text/javascript\">\r\n\r\n        const mockdata = JSON.parse(\'");
#nullable restore
#line 117 "D:\C#\ProjectLzPhong\CDCNPM_PHONG\CDCNPM\Views\Home\HomePage.cshtml"
                                Write(Json.Serialize(Model));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"')

        const table_str_condition = (tableName, colName) => ` 
          <div   
            class=""grid grid-cols-12 gap-3 mt-8 query-wrapper""
            data-col=""${colName}""
            data-table=""${tableName}""
          >
            <div class=""content-table-name font-bold text-[12px] col-span-1"">
              ${tableName}
            </div>
            <div
              class=""content-table-fieldname font-bold text-[12px] col-span-1""
            >
              ${colName}
            </div>
            <div class=""content-table-rename font-bold text-[12px] col-span-3"">
              <input
                class=""shadow appearance-none border border-neutral-300 rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline""
                id=""rename-${colName}-${tableName}""
                type=""text""
                placeholder=""Rename field""
              />
            </div>
            <div class=""font-bold text-[12px] col-span-1"">");
                WriteLiteral(@"
              <div class=""flex justify-center"">
                <div class=""mb-3"">
                  <select
                    id=""total-select-${colName}-${tableName}""
                    class=""form-select appearance-none block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding bg-no-repeat border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none""
                    aria-label=""Default select example""
                  >
                    <option value=""None"">Select</option>
                    <option value=""MAX"">Max</option>
                    <option value=""MIN"">Min</option>
                    <option value=""COUNT"">Count</option>
                    <option value=""SUM"">Sum</option>
                    <option value=""GROUP BY"">Group by</option>
                  </select>
                </div>
              </div>
            </div>
            <div class=""font-b");
                WriteLiteral(@"old text-[12px] col-span-1"">
              <div class=""mb-3"">
                <select
                  id=""isSort-${colName}-${tableName}""
                  class=""form-select appearance-none block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding bg-no-repeat border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none""
                  aria-label=""Default select example""
                >
                  <option value=""None"">None</option>
                  <option value=""ASC"">Asc</option>
                  <option value=""DESC"">Desc</option>
                </select>
              </div>
            </div>
            <div class=""font-bold text-[12px] col-span-1"">
              <div class=""flex"">
                <label class=""flex items-center"">
                  <input
                    id=""isShow-${colName}-${tableName}""
                    type=""checkbox""
           ");
                WriteLiteral(@"         class=""form-checkbox h-5 w-5 text-gray-600""
                    value=""IsShow""
                  />
                  <span class=""ml-[5px]"">isShow</span>
                </label>
              </div>
            </div>
            <div class=""font-bold text-[12px] col-span-2"">
              <input
                id=""condition-${colName}-${tableName}""
                class=""shadow appearance-none border border-neutral-300 rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline""
                id=""Rename""
                type=""text""
                placeholder=""Condition""
              />
            </div>
            <div class=""font-bold text-[12px] col-span-2"">
              <input
                id=""or-condition-${colName}-${tableName}""
                class=""shadow appearance-none border border-neutral-300 rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline""
                id=""Rename""");
                WriteLiteral(@"
                type=""text""
                placeholder=""Or conditiom""
              />
            </div>
          </div>`;

        let selectedTables = [];
        let selectedCols = [];
        const initOption = {
            total: null,
            isSort: null,
            isShow: null,
            condition: null,
            orCondition: null,
            reName: """",
        };
        const checkboxTables = document.querySelectorAll("".table-sql-check"");
        const checkboxColsOfTableHtml = document.querySelectorAll("".col-table-check"");

        $(document).ready(function () {
            //////

            let checkboxTablesHtml = """";
            let checkboxColsOfTableHtml = """";
            const createQueryBtn = $(""#create-query"");
            const hide = ` <div
                class=""hide bg-neutral-100/[0.5] w-full h-full absolute rounded top-0 left-0""
              ></div>`;
            mockdata.forEach((ele) => {
                checkboxTablesHtml = checkbo");
                WriteLiteral(@"xTablesHtml.concat(`
     <div class=""flex mt-4"">
          <label class=""flex items-center"">
            <input
              type=""checkbox""
              class=""form-checkbox h-5 w-5 text-gray-600 table-sql-check""
              value=${ele.table_name}
            />
            <span class=""ml-[5px]"">${ele.table_name}</span>
          </label>
        </div>
  `);
            });

            $("".sidebar_table_sql"").append(checkboxTablesHtml);
            //////

            /////
            mockdata.forEach((ele) => {
                let colsChecHtml = """";
                ele.columns.forEach((ele) => {
                    colsChecHtml = colsChecHtml.concat(`
              <div class=""flex flex-wrap mr-[10px]"">
                <div class=""flex mt-4"">
                  <label class=""flex items-center"">
                    <input
                      type=""checkbox""
                      class=""form-checkbox h-5 w-5 text-gray-600 col-table-check""
                      value=""${e");
                WriteLiteral(@"le.column_name}""
                      data-table=""${ele.table_name}""
                    />
                    <span class=""ml-[5px] font-medium"">${ele.column_name}</span>
                  </label>
                </div>
              </div>
      `);
                });

                checkboxColsOfTableHtml = checkboxColsOfTableHtml.concat(`
              <div
                class=""relative column-item border-solid border-2 border-neutral-300 px-[20px] py-[15px] rounded mt-3""
                data-table = ""${ele.table_name}"" 
              >
              ${hide}
              <h2 class=""font-bold"">${ele.table_name}</h2>
              
               <div class=""flex flex-wrap"">
                 ${colsChecHtml}
               </div>
              
            </div>
      `);
            });
            /////

            ////////

            $("".col-wrapper"").append(checkboxColsOfTableHtml);

            ////////
            $("".table-sql-check"").on(""click"", (e) => {
");
                WriteLiteral(@"                const { value, checked } = e.target;

                if (checked) {
                    selectedTables.push(
                        mockdata.find((ele) => ele.table_name === value).table_name
                    );
                    $(`.column-item[data-table='${value}'] .hide`).remove();
                } else {
                    selectedTables = selectedTables.filter((ele) => ele !== value);

                    $(`.column-item[data-table='${value}']`).append(hide);
                    $(`.column-item[data-table='${value}'] .col-table-check`).prop(
                        ""checked"",
                        false
                    );
                    $(`#table-section .query-wrapper[data-table=""${value}""]`).remove();
                }
            });

            $("".col-table-check"").on(""click"", (e) => {
                const { value, checked, dataset } = e.target;
                const table = dataset.table;

                const foundCol = mockdata
     ");
                WriteLiteral(@"               .find((ele) => ele.table_name === table)
                    .columns.find((ele) => ele.column_name === value);
                if (checked) {
                    selectedCols.push({ ...foundCol, options: initOption });
                    $(""#table-section"").append(
                        table_str_condition(foundCol.table_name, foundCol.column_name)
                    );
                } else {
                    selectedCols = selectedCols.filter(
                        (ele) => `${ele.table_name}-${ele.column_name}` !== `${table}-${value}`
                    );

                    $(
                        `#table-section .query-wrapper[data-col=""${foundCol.column_name}""][data-table=""${table}""]`
                    ).remove();
                }
            });

            createQueryBtn.on(""click"", () => {
                selectedCols = selectedCols.map((ele) => ({
                    ...ele,
                    options: {
                        ...ele.option");
                WriteLiteral(@"s,
                        sql_table: mockdata.find((item) => item.table_name == ele.table_name),
                        sql_column: mockdata
                            .find((item) => item.table_name === ele.table_name)
                            .columns.find((item2) => item2.column_name === ele.column_name),
                        reName: $(`#rename-${ele.column_name}-${ele.table_name}`).val(),
                        isShow: $(`#isShow-${ele.column_name}-${ele.table_name}`).is("":checked""),
                        isSort: $(`#isSort-${ele.column_name}-${ele.table_name}`).val(),
                        total: $(`#total-select-${ele.column_name}-${ele.table_name}`).val(),
                        condition: $(`#condition-${ele.column_name}-${ele.table_name}`).val() === """" ?
                            null : $(`#condition-${ele.column_name}-${ele.table_name}`).val(),
                        orCondition: $(
                            `#or-condition-${ele.column_name}-${ele.table_name}`
      ");
                WriteLiteral(@"                  ).val() === """" ?
                            null : $(
                                `#or-condition-${ele.column_name}-${ele.table_name}`
                            ).val().split("",""),
                    },
                }));

                console.log(selectedCols)

                const request = {
                    tableList: selectedTables.map((tableName) => mockdata.find((ele) => ele.table_name === tableName)),
                    objectList: selectedCols.map((ele) => ele.options)
                }
               
                $.ajax({
                    contentType: ""application/json"",
                    dataType: 'json',
                    type: ""POST"",
                    url: ""/home/CreateQuery"",
                    data: JSON.stringify(request),
                    success: function (data) {
                        $(""#show-query-area"").val(JSON.stringify(data));
                        console.log(""output : "" + JSON.stringify(data));
        ");
                WriteLiteral("            },\r\n                    error: function (data) {\r\n                        console.log(\"error : \" + JSON.stringify(data));\r\n                    },\r\n                })\r\n\r\n           \r\n            });\r\n        });\r\n\r\n    </script>\r\n");
            }
            );
            WriteLiteral("\r\n\r\n\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<List<SqlTable>> Html { get; private set; }
    }
}
#pragma warning restore 1591
